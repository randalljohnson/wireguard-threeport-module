// generated by 'threeport-sdk gen' - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	api_v0 "github.com/randalljohnson/wireguard-threeport-module/pkg/api/v0"
	client_v0 "github.com/randalljohnson/wireguard-threeport-module/pkg/client/v0"
	config_v0 "github.com/randalljohnson/wireguard-threeport-module/pkg/config/v0"
	cobra "github.com/spf13/cobra"
	tptctl_cmd "github.com/threeport/threeport/cmd/tptctl/cmd"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	tptctl_config "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
)

///////////////////////////////////////////////////////////////////////////////
// WireguardDefinition
///////////////////////////////////////////////////////////////////////////////

var getWireguardDefinitionVersion string

// GetWireguardDefinitionsCmd represents the wireguard-definition command
var GetWireguardDefinitionsCmd = &cobra.Command{
	Example: "  tptctl wireguard get wireguard-definitions",
	Long:    "Get wireguard definitions from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := tptctl_cmd.GetClientContext(cmd)

		switch getWireguardDefinitionVersion {
		case "v0":
			// get wireguard definitions
			wireguardDefinitions, err := client_v0.GetWireguardDefinitions(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve wireguard definitions", err)
				os.Exit(1)
			}

			// write the output
			if len(*wireguardDefinitions) == 0 {
				cli.Info(fmt.Sprintf(
					"No wireguard definitions currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0WireguardDefinitionsCmd(
				wireguardDefinitions,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get wireguard definitions from the system",
	SilenceUsage: true,
	Use:          "wireguard-definitions",
}

func init() {
	GetCmd.AddCommand(GetWireguardDefinitionsCmd)

	GetWireguardDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetWireguardDefinitionsCmd.Flags().StringVarP(
		&getWireguardDefinitionVersion,
		"version", "v", "v0", "Version of wireguard definitions object to retrieve. One of: [v0]",
	)
}

var (
	createWireguardDefinitionConfigPath string
	createWireguardDefinitionVersion    string
)

// CreateWireguardDefinitionCmd represents the wireguard-definition command
var CreateWireguardDefinitionCmd = &cobra.Command{
	Example: "  tptctl wireguard create wireguard-definition --config path/to/config.yaml",
	Long:    "Create a new wireguard definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// read wireguard definition config
		configContent, err := os.ReadFile(createWireguardDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create wireguard definition based on version
		switch createWireguardDefinitionVersion {
		case "v0":
			var wireguardDefinitionConfig config_v0.WireguardDefinitionConfig
			if err := yaml.UnmarshalStrict(configContent, &wireguardDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create wireguard definition
			wireguardDefinition := wireguardDefinitionConfig.WireguardDefinition
			createdWireguardDefinition, err := wireguardDefinition.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create wireguard definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wireguard definition %s created", *createdWireguardDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new wireguard definition",
	SilenceUsage: true,
	Use:          "wireguard-definition",
}

func init() {
	CreateCmd.AddCommand(CreateWireguardDefinitionCmd)

	CreateWireguardDefinitionCmd.Flags().StringVarP(
		&createWireguardDefinitionConfigPath,
		"config", "c", "", "Path to file with wireguard definition config.",
	)
	CreateWireguardDefinitionCmd.MarkFlagRequired("config")
	CreateWireguardDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateWireguardDefinitionCmd.Flags().StringVarP(
		&createWireguardDefinitionVersion,
		"version", "v", "v0", "Version of wireguard definitions object to create. One of: [v0]",
	)
}

var (
	deleteWireguardDefinitionConfigPath string
	deleteWireguardDefinitionName       string
	deleteWireguardDefinitionVersion    string
)

// DeleteWireguardDefinitionCmd represents the wireguard-definition command
var DeleteWireguardDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl wireguard delete wireguard-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl wireguard delete wireguard-definition --name some-wireguard-definition",
	Long:    "Delete an existing wireguard definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteWireguardDefinitionConfigPath,
			deleteWireguardDefinitionName,
			"wireguard definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete wireguard definition based on version
		switch deleteWireguardDefinitionVersion {
		case "v0":
			var wireguardDefinitionConfig config_v0.WireguardDefinitionConfig
			if deleteWireguardDefinitionConfigPath != "" {
				// load wireguard definition config
				configContent, err := os.ReadFile(deleteWireguardDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wireguardDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wireguardDefinitionConfig = config_v0.WireguardDefinitionConfig{
					WireguardDefinition: config_v0.WireguardDefinitionValues{
						Name: &deleteWireguardDefinitionName,
					},
				}
			}

			// delete wireguard definition
			wireguardDefinition := wireguardDefinitionConfig.WireguardDefinition
			deletedWireguardDefinition, err := wireguardDefinition.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete wireguard definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wireguard definition %s deleted", *deletedWireguardDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing wireguard definition",
	SilenceUsage: true,
	Use:          "wireguard-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteWireguardDefinitionCmd)

	DeleteWireguardDefinitionCmd.Flags().StringVarP(
		&deleteWireguardDefinitionConfigPath,
		"config", "c", "", "Path to file with wireguard definition config.",
	)
	DeleteWireguardDefinitionCmd.Flags().StringVarP(
		&deleteWireguardDefinitionName,
		"name", "n", "", "Name of wireguard definition.",
	)
	DeleteWireguardDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteWireguardDefinitionCmd.Flags().StringVarP(
		&deleteWireguardDefinitionVersion,
		"version", "v", "v0", "Version of wireguard definitions object to delete. One of: [v0]",
	)
}

var (
	describeWireguardDefinitionConfigPath string
	describeWireguardDefinitionName       string
	describeWireguardDefinitionField      string
	describeWireguardDefinitionOutput     string
	describeWireguardDefinitionVersion    string
)

// DescribeWireguardDefinitionCmd representes the wireguard-definition command
var DescribeWireguardDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a wireguard definition\n  tptctl wireguard describe wireguard-definition -n some-wireguard-definition\n\n  # Get JSON output for a wireguard definition\n  tptctl wireguard describe wireguard-definition -n some-wireguard-definition -o json\n\n  # Get the value of the Name field for a wireguard definition\n  tptctl wireguard describe wireguard-definition -n some-wireguard-definition -f Name ",
	Long:    "Describe a wireguard definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeWireguardDefinitionConfigPath,
			describeWireguardDefinitionName,
			"wireguard definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeWireguardDefinitionOutput,
			"wireguard definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get wireguard definition
		var wireguardDefinition interface{}
		switch describeWireguardDefinitionVersion {
		case "v0":
			// load wireguard definition config by name or config file
			var wireguardDefinitionConfig config_v0.WireguardDefinitionConfig
			if describeWireguardDefinitionConfigPath != "" {
				configContent, err := os.ReadFile(describeWireguardDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wireguardDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wireguardDefinitionConfig = config_v0.WireguardDefinitionConfig{
					WireguardDefinition: config_v0.WireguardDefinitionValues{
						Name: &describeWireguardDefinitionName,
					},
				}
			}

			// get wireguard definition object by name
			obj, err := client_v0.GetWireguardDefinitionByName(
				apiClient,
				apiEndpoint,
				*wireguardDefinitionConfig.WireguardDefinition.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve wireguard definition details", err)
				os.Exit(1)
			}
			wireguardDefinition = obj

			// return plain output if requested
			if describeWireguardDefinitionOutput == "plain" {
				if err := outputDescribev0WireguardDefinitionCmd(
					wireguardDefinition.(*api_v0.WireguardDefinition),
					&wireguardDefinitionConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe wireguard definition", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeWireguardDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				wireguardDefinition,
				describeWireguardDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from wireguard definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(wireguardDefinition, describeWireguardDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := tptctl_config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeWireguardDefinitionOutput {
		case "json":
			// redact encrypted values
			redactedWireguardDefinition := encryption.RedactEncryptedValues(wireguardDefinition)

			// marshal to JSON then print
			wireguardDefinitionJson, err := json.MarshalIndent(redactedWireguardDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wireguard definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(wireguardDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedWireguardDefinition := encryption.RedactEncryptedValues(wireguardDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			wireguardDefinitionJson, err := json.MarshalIndent(redactedWireguardDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wireguard definition into JSON", err)
				os.Exit(1)
			}
			wireguardDefinitionYaml, err := ghodss_yaml.JSONToYAML(wireguardDefinitionJson)
			if err != nil {
				cli.Error("failed to convert wireguard definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(wireguardDefinitionYaml))
		}
	},
	Short:        "Describe a wireguard definition",
	SilenceUsage: true,
	Use:          "wireguard-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeWireguardDefinitionCmd)

	DescribeWireguardDefinitionCmd.Flags().StringVarP(
		&describeWireguardDefinitionConfigPath,
		"config", "c", "", "Path to file with wireguard definition config.",
	)
	DescribeWireguardDefinitionCmd.Flags().StringVarP(
		&describeWireguardDefinitionName,
		"name", "n", "", "Name of wireguard definition.",
	)
	DescribeWireguardDefinitionCmd.Flags().StringVarP(
		&describeWireguardDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeWireguardDefinitionCmd.Flags().StringVarP(
		&describeWireguardDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeWireguardDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeWireguardDefinitionCmd.Flags().StringVarP(
		&describeWireguardDefinitionVersion,
		"version", "v", "v0", "Version of wireguard definitions object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// Wireguard
///////////////////////////////////////////////////////////////////////////////

// GetWireguardsCmd represents the wireguard command
var GetWireguardsCmd = &cobra.Command{
	Example: "  tptctl wireguard get wireguards",
	Long:    "Get wireguards from the system.\n\nA wireguard is a simple abstraction of wireguard definitions and wireguard instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := tptctl_cmd.GetClientContext(cmd)

		// get wireguards
		v0wireguardInstances, err := client_v0.GetWireguardInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve wireguard instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*v0wireguardInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No wireguard instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetWireguardsCmd(
			v0wireguardInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get wireguards from the system",
	SilenceUsage: true,
	Use:          "wireguards",
}

func init() {
	GetCmd.AddCommand(GetWireguardsCmd)

	GetWireguardsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	createWireguardConfigPath string
	createWireguardVersion    string
)

// CreateWireguardCmd represents the wireguard command
var CreateWireguardCmd = &cobra.Command{
	Example: "  tptctl wireguard create wireguard --config path/to/config.yaml",
	Long:    "Create a new wireguard. This command creates a new wireguard definition and wireguard instance based on the wireguard config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// read wireguard config
		configContent, err := os.ReadFile(createWireguardConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// create wireguard based on version
		switch createWireguardVersion {
		case "v0":
			var wireguardConfig config_v0.WireguardConfig
			if err := yaml.UnmarshalStrict(configContent, &wireguardConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create wireguard
			wireguard := wireguardConfig.Wireguard
			createdWireguardDefinition, createdWireguardInstance, err := wireguard.Create(
				apiClient,
				apiEndpoint,
			)
			if err != nil {
				cli.Error("failed to create wireguard", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("wireguard definition %s created", *createdWireguardDefinition.Name))
			cli.Info(fmt.Sprintf("wireguard instance %s created", *createdWireguardInstance.Name))
			cli.Complete(fmt.Sprintf("wireguard %s created", *wireguardConfig.Wireguard.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new wireguard",
	SilenceUsage: true,
	Use:          "wireguard",
}

func init() {
	CreateCmd.AddCommand(CreateWireguardCmd)

	CreateWireguardCmd.Flags().StringVarP(
		&createWireguardConfigPath,
		"config", "c", "", "Path to file with wireguard config.",
	)
	CreateWireguardCmd.MarkFlagRequired("config")
	CreateWireguardCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateWireguardCmd.Flags().StringVarP(
		&createWireguardVersion,
		"version", "v", "v0", "Version of wireguards object to create. One of: [v0]",
	)
}

var (
	deleteWireguardConfigPath string
	deleteWireguardName       string
	deleteWireguardVersion    string
)

// DeleteWireguardCmd represents the wireguard command
var DeleteWireguardCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl wireguard delete wireguard --config path/to/config.yaml\n\n  # delete based on name\n  tptctl wireguard delete wireguard --name some-wireguard",
	Long:    "Delete an existing wireguard. This command deletes an existing wireguard definition and wireguard instance based on the wireguard config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if deleteWireguardConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		// read wireguard config
		configContent, err := os.ReadFile(deleteWireguardConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// delete wireguard based on version
		switch deleteWireguardVersion {
		case "v0":
			var wireguardConfig config_v0.WireguardConfig
			if err := yaml.UnmarshalStrict(configContent, &wireguardConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// delete wireguard
			wireguard := wireguardConfig.Wireguard
			_, _, err = wireguard.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete wireguard", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("wireguard definition %s deleted", *wireguard.Name))
			cli.Info(fmt.Sprintf("wireguard instance %s deleted", *wireguard.Name))
			cli.Complete(fmt.Sprintf("wireguard %s deleted", *wireguardConfig.Wireguard.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing wireguard",
	SilenceUsage: true,
	Use:          "wireguard",
}

func init() {
	DeleteCmd.AddCommand(DeleteWireguardCmd)

	DeleteWireguardCmd.Flags().StringVarP(
		&deleteWireguardConfigPath,
		"config", "c", "", "Path to file with wireguard config.",
	)
	DeleteWireguardCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteWireguardCmd.Flags().StringVarP(
		&deleteWireguardVersion,
		"version", "v", "v0", "Version of wireguards object to delete. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// WireguardInstance
///////////////////////////////////////////////////////////////////////////////

var getWireguardInstanceVersion string

// GetWireguardInstancesCmd represents the wireguard-instance command
var GetWireguardInstancesCmd = &cobra.Command{
	Example: "  tptctl wireguard get wireguard-instances",
	Long:    "Get wireguard instances from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := tptctl_cmd.GetClientContext(cmd)

		switch getWireguardInstanceVersion {
		case "v0":
			// get wireguard instances
			wireguardInstances, err := client_v0.GetWireguardInstances(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve wireguard instances", err)
				os.Exit(1)
			}

			// write the output
			if len(*wireguardInstances) == 0 {
				cli.Info(fmt.Sprintf(
					"No wireguard instances currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0WireguardInstancesCmd(
				wireguardInstances,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get wireguard instances from the system",
	SilenceUsage: true,
	Use:          "wireguard-instances",
}

func init() {
	GetCmd.AddCommand(GetWireguardInstancesCmd)

	GetWireguardInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetWireguardInstancesCmd.Flags().StringVarP(
		&getWireguardInstanceVersion,
		"version", "v", "v0", "Version of wireguard instances object to retrieve. One of: [v0]",
	)
}

var (
	createWireguardInstanceConfigPath string
	createWireguardInstanceVersion    string
)

// CreateWireguardInstanceCmd represents the wireguard-instance command
var CreateWireguardInstanceCmd = &cobra.Command{
	Example: "  tptctl wireguard create wireguard-instance --config path/to/config.yaml",
	Long:    "Create a new wireguard instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// read wireguard instance config
		configContent, err := os.ReadFile(createWireguardInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create wireguard instance based on version
		switch createWireguardInstanceVersion {
		case "v0":
			var wireguardInstanceConfig config_v0.WireguardInstanceConfig
			if err := yaml.UnmarshalStrict(configContent, &wireguardInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create wireguard instance
			wireguardInstance := wireguardInstanceConfig.WireguardInstance
			createdWireguardInstance, err := wireguardInstance.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create wireguard instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wireguard instance %s created", *createdWireguardInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new wireguard instance",
	SilenceUsage: true,
	Use:          "wireguard-instance",
}

func init() {
	CreateCmd.AddCommand(CreateWireguardInstanceCmd)

	CreateWireguardInstanceCmd.Flags().StringVarP(
		&createWireguardInstanceConfigPath,
		"config", "c", "", "Path to file with wireguard instance config.",
	)
	CreateWireguardInstanceCmd.MarkFlagRequired("config")
	CreateWireguardInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateWireguardInstanceCmd.Flags().StringVarP(
		&createWireguardInstanceVersion,
		"version", "v", "v0", "Version of wireguard instances object to create. One of: [v0]",
	)
}

var (
	deleteWireguardInstanceConfigPath string
	deleteWireguardInstanceName       string
	deleteWireguardInstanceVersion    string
)

// DeleteWireguardInstanceCmd represents the wireguard-instance command
var DeleteWireguardInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl wireguard delete wireguard-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl wireguard delete wireguard-instance --name some-wireguard-instance",
	Long:    "Delete an existing wireguard instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteWireguardInstanceConfigPath,
			deleteWireguardInstanceName,
			"wireguard instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete wireguard instance based on version
		switch deleteWireguardInstanceVersion {
		case "v0":
			var wireguardInstanceConfig config_v0.WireguardInstanceConfig
			if deleteWireguardInstanceConfigPath != "" {
				// load wireguard instance config
				configContent, err := os.ReadFile(deleteWireguardInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wireguardInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wireguardInstanceConfig = config_v0.WireguardInstanceConfig{
					WireguardInstance: config_v0.WireguardInstanceValues{
						Name: &deleteWireguardInstanceName,
					},
				}
			}

			// delete wireguard instance
			wireguardInstance := wireguardInstanceConfig.WireguardInstance
			deletedWireguardInstance, err := wireguardInstance.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete wireguard instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wireguard instance %s deleted", *deletedWireguardInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing wireguard instance",
	SilenceUsage: true,
	Use:          "wireguard-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteWireguardInstanceCmd)

	DeleteWireguardInstanceCmd.Flags().StringVarP(
		&deleteWireguardInstanceConfigPath,
		"config", "c", "", "Path to file with wireguard instance config.",
	)
	DeleteWireguardInstanceCmd.Flags().StringVarP(
		&deleteWireguardInstanceName,
		"name", "n", "", "Name of wireguard instance.",
	)
	DeleteWireguardInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteWireguardInstanceCmd.Flags().StringVarP(
		&deleteWireguardInstanceVersion,
		"version", "v", "v0", "Version of wireguard instances object to delete. One of: [v0]",
	)
}

var (
	describeWireguardInstanceConfigPath string
	describeWireguardInstanceName       string
	describeWireguardInstanceField      string
	describeWireguardInstanceOutput     string
	describeWireguardInstanceVersion    string
)

// DescribeWireguardInstanceCmd representes the wireguard-instance command
var DescribeWireguardInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a wireguard instance\n  tptctl wireguard describe wireguard-instance -n some-wireguard-instance\n\n  # Get JSON output for a wireguard instance\n  tptctl wireguard describe wireguard-instance -n some-wireguard-instance -o json\n\n  # Get the value of the Name field for a wireguard instance\n  tptctl wireguard describe wireguard-instance -n some-wireguard-instance -f Name ",
	Long:    "Describe a wireguard instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeWireguardInstanceConfigPath,
			describeWireguardInstanceName,
			"wireguard instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeWireguardInstanceOutput,
			"wireguard instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get wireguard instance
		var wireguardInstance interface{}
		switch describeWireguardInstanceVersion {
		case "v0":
			// load wireguard instance config by name or config file
			var wireguardInstanceConfig config_v0.WireguardInstanceConfig
			if describeWireguardInstanceConfigPath != "" {
				configContent, err := os.ReadFile(describeWireguardInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wireguardInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wireguardInstanceConfig = config_v0.WireguardInstanceConfig{
					WireguardInstance: config_v0.WireguardInstanceValues{
						Name: &describeWireguardInstanceName,
					},
				}
			}

			// get wireguard instance object by name
			obj, err := client_v0.GetWireguardInstanceByName(
				apiClient,
				apiEndpoint,
				*wireguardInstanceConfig.WireguardInstance.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve wireguard instance details", err)
				os.Exit(1)
			}
			wireguardInstance = obj

			// return plain output if requested
			if describeWireguardInstanceOutput == "plain" {
				if err := outputDescribev0WireguardInstanceCmd(
					wireguardInstance.(*api_v0.WireguardInstance),
					&wireguardInstanceConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe wireguard instance", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeWireguardInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				wireguardInstance,
				describeWireguardInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from wireguard instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(wireguardInstance, describeWireguardInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := tptctl_config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeWireguardInstanceOutput {
		case "json":
			// redact encrypted values
			redactedWireguardInstance := encryption.RedactEncryptedValues(wireguardInstance)

			// marshal to JSON then print
			wireguardInstanceJson, err := json.MarshalIndent(redactedWireguardInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wireguard instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(wireguardInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedWireguardInstance := encryption.RedactEncryptedValues(wireguardInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			wireguardInstanceJson, err := json.MarshalIndent(redactedWireguardInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wireguard instance into JSON", err)
				os.Exit(1)
			}
			wireguardInstanceYaml, err := ghodss_yaml.JSONToYAML(wireguardInstanceJson)
			if err != nil {
				cli.Error("failed to convert wireguard instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(wireguardInstanceYaml))
		}
	},
	Short:        "Describe a wireguard instance",
	SilenceUsage: true,
	Use:          "wireguard-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeWireguardInstanceCmd)

	DescribeWireguardInstanceCmd.Flags().StringVarP(
		&describeWireguardInstanceConfigPath,
		"config", "c", "", "Path to file with wireguard instance config.",
	)
	DescribeWireguardInstanceCmd.Flags().StringVarP(
		&describeWireguardInstanceName,
		"name", "n", "", "Name of wireguard instance.",
	)
	DescribeWireguardInstanceCmd.Flags().StringVarP(
		&describeWireguardInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeWireguardInstanceCmd.Flags().StringVarP(
		&describeWireguardInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeWireguardInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeWireguardInstanceCmd.Flags().StringVarP(
		&describeWireguardInstanceVersion,
		"version", "v", "v0", "Version of wireguard instances object to describe. One of: [v0]",
	)
}
