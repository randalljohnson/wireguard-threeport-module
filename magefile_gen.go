// generated by 'threeport-sdk gen' - do not edit

//go:build mage
// +build mage

package main

import (
	"fmt"
	"os"
	"os/exec"
	"runtime"

	mg "github.com/magefile/mage/mg"
	version "github.com/randalljohnson/wireguard-threeport-module/internal/version"
	installer "github.com/randalljohnson/wireguard-threeport-module/pkg/installer/v0"
	tptdev "github.com/threeport/threeport/pkg/threeport-installer/v0/tptdev"
	util "github.com/threeport/threeport/pkg/util/v0"
)

const releaseArch = "arm64"

// Build provides a type for methods that implement build targets.
type Build mg.Namespace

// Test provides a type for methods that implement test targets.
type Test mg.Namespace

// Install provides a type for methods that implement install targets.
type Install mg.Namespace

// Dev provides a type for methods that implement dev targets.
type Dev mg.Namespace

// ApiBin builds the REST API binary.
func (Build) ApiBin(arch string) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"rest-api",
		"cmd/rest-api/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build rest-api binary: %w", err)
	}

	fmt.Println("binary built and available at bin/rest-api")

	return nil
}

// ApiBinDev builds the REST API binary for the architcture of the machine
// where it is built.
func (Build) ApiBinDev() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	build := Build{}
	if err := build.ApiBin(arch); err != nil {
		return fmt.Errorf("failed to build dev rest-api binary: %w", err)
	}

	return nil
}

// ApiBinRelease builds the REST API binary for release architecture.
func (Build) ApiBinRelease() error {
	build := Build{}
	if err := build.ApiBin(releaseArch); err != nil {
		return fmt.Errorf("failed to build release rest-api binary: %w", err)
	}

	return nil
}

// ApiImage builds and pushes a REST API container image.
func (Build) ApiImage(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory: %w", err)
	}

	build := Build{}
	if err := build.ApiBin(arch); err != nil {
		return fmt.Errorf("failed to build binary for image build: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/rest-api/image/Dockerfile-alpine",
		arch,
		imageRepo,
		"threeport-wireguard-rest-api",
		imageTag,
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push rest-api image: %w", err)
	}

	return nil
}

// ApiImageDev builds and pushes a development REST API container image.
func (Build) ApiImageDev() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	build := Build{}
	if err := build.ApiImage(
		installer.DevImageRepo,
		version.GetVersion(),
		arch,
	); err != nil {
		return fmt.Errorf("failed to build and push dev rest-api image: %w", err)
	}

	return nil
}

// ApiImageRelease builds and pushes a release REST API container image.
func (Build) ApiImageRelease() error {
	build := Build{}
	if err := build.ApiImage(
		installer.ReleaseImageRepo,
		version.GetVersion(),
		releaseArch,
	); err != nil {
		return fmt.Errorf("failed to build and push release rest-api image: %w", err)
	}

	return nil
}

// DbMigratorBin builds the database migrator binary.
func (Build) DbMigratorBin(arch string) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"database-migrator",
		"cmd/database-migrator/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build database-migrator binary: %w", err)
	}

	fmt.Println("binary built and available at bin/database-migrator")

	return nil
}

// DbMigratorBinDev builds the database migrator binary for the architcture of the machine
// where it is built.
func (Build) DbMigratorBinDev() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	build := Build{}
	if err := build.DbMigratorBin(arch); err != nil {
		return fmt.Errorf("failed to build dev database-migrator binary: %w", err)
	}

	return nil
}

// DbMigratorBinRelease builds the database migrator binary for release architecture.
func (Build) DbMigratorBinRelease() error {
	build := Build{}
	if err := build.DbMigratorBin(releaseArch); err != nil {
		return fmt.Errorf("failed to build release database-migrator binary: %w", err)
	}

	return nil
}

// DbMigratorImage builds and pushes a database migrator container image.
func (Build) DbMigratorImage(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory: %w", err)
	}

	build := Build{}
	if err := build.DbMigratorBin(arch); err != nil {
		return fmt.Errorf("failed to build binary for image build: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/database-migrator/image/Dockerfile-alpine",
		arch,
		imageRepo,
		"threeport-wireguard-database-migrator",
		imageTag,
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push database-migrator image: %w", err)
	}

	return nil
}

// DbMigratorImageDev builds and pushes a development database migrator container image.
func (Build) DbMigratorImageDev() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	build := Build{}
	if err := build.DbMigratorImage(
		installer.DevImageRepo,
		version.GetVersion(),
		arch,
	); err != nil {
		return fmt.Errorf("failed to build and push dev database-migrator image: %w", err)
	}

	return nil
}

// DbMigratorImageRelease builds and pushes a release database migrator container image.
func (Build) DbMigratorImageRelease() error {
	build := Build{}
	if err := build.DbMigratorImage(
		installer.ReleaseImageRepo,
		version.GetVersion(),
		releaseArch,
	); err != nil {
		return fmt.Errorf("failed to build and push release database-migrator image: %w", err)
	}

	return nil
}

// WireguardControllerBin builds the binary for the wireguard-controller.
func (Build) WireguardControllerBin(arch string) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"wireguard-controller",
		"cmd/wireguard-controller/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build wireguard-controller binary: %w", err)
	}

	fmt.Println("binary built and available at bin/wireguard-controller")

	return nil
}

// WireguardControllerBinDev builds the wireguard-controller binary for the architcture of the machine
// where it is built.
func (Build) WireguardControllerBinDev() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	build := Build{}
	if err := build.WireguardControllerBin(arch); err != nil {
		return fmt.Errorf("failed to build dev wireguard-controller binary: %w", err)
	}

	return nil
}

// WireguardControllerBinRelease builds the wireguard-controller binary for release architecture.
func (Build) WireguardControllerBinRelease() error {
	build := Build{}
	if err := build.WireguardControllerBin(releaseArch); err != nil {
		return fmt.Errorf("failed to build release wireguard-controller binary: %w", err)
	}

	return nil
}

// WireguardControllerImage builds and pushes the container image for the wireguard-controller.
func (Build) WireguardControllerImage(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory: %w", err)
	}

	build := Build{}
	if err := build.WireguardControllerBin(arch); err != nil {
		return fmt.Errorf("failed to build binary for image build: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/wireguard-controller/image/Dockerfile-alpine",
		arch,
		imageRepo,
		"threeport-wireguard-wireguard-controller",
		imageTag,
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push wireguard-controller image: %w", err)
	}

	return nil
}

// WireguardControllerImageDev builds and pushes a development wireguard-controller container image.
func (Build) WireguardControllerImageDev() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	build := Build{}
	if err := build.WireguardControllerImage(
		installer.DevImageRepo,
		version.GetVersion(),
		arch,
	); err != nil {
		return fmt.Errorf("failed to build and push dev wireguard-controller image: %w", err)
	}

	return nil
}

// WireguardControllerImageRelease builds and pushes a release wireguard-controller container image.
func (Build) WireguardControllerImageRelease() error {
	build := Build{}
	if err := build.WireguardControllerImage(
		installer.ReleaseImageRepo,
		version.GetVersion(),
		releaseArch,
	); err != nil {
		return fmt.Errorf("failed to build and push release wireguard-controller image: %w", err)
	}

	return nil
}

// AllBins builds the binaries for all components.
func (Build) AllBins(arch string) error {
	build := Build{}
	if err := build.ApiBin(arch); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := build.DbMigratorBin(arch); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := build.WireguardControllerBin(arch); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	return nil
}

// AllBins builds the development binaries for all components.
func (Build) AllBinsDev() error {
	build := Build{}
	if err := build.ApiBinDev(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := build.DbMigratorBinDev(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := build.WireguardControllerBinDev(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	return nil
}

// AllBins builds the release binaries for all components.
func (Build) AllBinsRelease() error {
	build := Build{}
	if err := build.ApiBinRelease(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := build.DbMigratorBinRelease(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := build.WireguardControllerBinRelease(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	return nil
}

// AllImages builds and pushes images for all components.
func (Build) AllImages(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	build := Build{}
	if err := build.ApiImage(imageRepo, imageTag, arch); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := build.DbMigratorImage(imageRepo, imageTag, arch); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := build.WireguardControllerImage(imageRepo, imageTag, arch); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	return nil
}

// AllImagesDev builds and pushes development images for all components.
func (Build) AllImagesDev() error {
	build := Build{}
	if err := build.ApiImageDev(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := build.DbMigratorImageDev(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := build.WireguardControllerImageDev(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	return nil
}

// AllImagesRelease builds and pushes development images for all components.
func (Build) AllImagesRelease() error {
	build := Build{}
	if err := build.ApiImageRelease(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := build.DbMigratorImageRelease(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := build.WireguardControllerImageRelease(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	return nil
}

// LoadImage builds and loads an image to the provided kind cluster.
func (Dev) LoadImage(kindClusterName string, component string) error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	imageName := fmt.Sprintf("threeport-%s-%s", "wireguard", component)

	if err := util.BuildImage(
		workingDir,
		fmt.Sprintf("cmd/%s/image/Dockerfile-alpine", component),
		arch,
		installer.DevImageRepo,
		imageName,
		version.GetVersion(),
		false,
		true,
		kindClusterName,
	); err != nil {
		return fmt.Errorf("failed to build and load image: %w", err)
	}

	return nil
}

// Plugin compiles the extension's tptctl plugin.
func (Build) Plugin() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/wireguard",
		"cmd/wireguard/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for tptctl plugin with output '%s': %w", output, err)
	}

	fmt.Println("tptctl plugin built and available at bin/wireguard")

	return nil
}

// GenerateSwaggerDocs generates the API server swagger documentation served by the API.
func (Dev) GenerateSwaggerDocs() error {
	docsDestination := "pkg/api-server/v0/docs"
	swagCmd := exec.Command(
		"swag",
		"init",
		"--dir",
		"cmd/rest-api,pkg/api,pkg/api-server/v0",
		"--parseDependency",
		"--generalInfo",
		"main_gen.go",
		"--output",
		docsDestination,
	)

	output, err := swagCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("API docs generation failed with output '%s': %w", output, err)
	}

	fmt.Printf("API docs generated in %s\n", docsDestination)

	return nil
}

// LocalRegistryUp starts a docker container to serve as a local container registry.
func (Dev) LocalRegistryUp() error {
	if err := tptdev.CreateLocalRegistry(); err != nil {
		return fmt.Errorf("failed to create local container registry: %w", err)
	}

	return nil
}

// LocalRegistryDown stops and removes the local container registry.
func (Dev) LocalRegistryDown() error {
	if err := tptdev.DeleteLocalRegistry(); err != nil {
		return fmt.Errorf("failed to remove local container registry: %w", err)
	}

	return nil
}

// getBuildVals returns the working directory and arch for builds.
func getBuildVals() (string, string, error) {
	workingDir, err := os.Getwd()
	if err != nil {
		return "", "", fmt.Errorf("failed to get working directory: %w", err)
	}

	arch := runtime.GOARCH

	return workingDir, arch, nil
}
