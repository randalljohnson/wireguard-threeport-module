// generated by 'threeport-sdk gen' but will not be regenerated - intended for modification

package wireguard

import (
	"fmt"

	logr "github.com/go-logr/logr"
	v0 "github.com/randalljohnson/wireguard-threeport-module/pkg/api/v0"
	tpclient_v0 "github.com/randalljohnson/wireguard-threeport-module/pkg/client/v0"
	tpapi "github.com/threeport/threeport/pkg/api/v0"
	tpapi_v0 "github.com/threeport/threeport/pkg/api/v0"
	helmclient_v0 "github.com/threeport/threeport/pkg/client/v0"
	tpclient "github.com/threeport/threeport/pkg/client/v0"
	controller "github.com/threeport/threeport/pkg/controller/v0"
	"gopkg.in/yaml.v3"
)

// v0WireguardInstanceCreated performs reconciliation when a v0 WireguardInstance
// has been created.
func v0WireguardInstanceCreated(
	r *controller.Reconciler,
	wireguardInstance *v0.WireguardInstance,
	log *logr.Logger,
) (int64, error) {

	// get attached Kubernetes runtime instance ID
	kubernetesRuntimeInstanceId, err := tpclient.GetObjectIdByAttachedObject(
		r.APIClient,
		r.APIServer,
		tpapi.ObjectTypeKubernetesRuntimeInstance,
		v0.ObjectTypeWireguardInstance,
		*wireguardInstance.ID,
	)
	if err != nil {
		return 0, fmt.Errorf("failed to get Kubernetes runtime instance by attachment: %w", err)
	}

	// Get the associated WireguardDefinition
	wireguardDef, err := tpclient_v0.GetWireguardDefinitionByID(r.APIClient, r.APIServer, *wireguardInstance.WireguardDefinitionID)
	if err != nil {
		return 0, fmt.Errorf("failed to get WireguardDefinition: %w", err)
	}

	// Get the associated HelmWorkloadDefinition
	helmWorkloadDef, err := helmclient_v0.GetHelmWorkloadDefinitionByName(r.APIClient, r.APIServer, *wireguardDef.Name)
	if err != nil {
		return 0, fmt.Errorf("failed to get HelmWorkloadDefinition: %w", err)
	}

	// // Marshal the Helm values to YAML
	// valuesYAML, err := yaml.Marshal(getHelmValues())
	// if err != nil {
	// 	return 0, fmt.Errorf("failed to marshal Helm values: %w", err)
	// }
	// valuesStr := string(valuesYAML)

	// Create HelmWorkloadInstance for wg-portal
	helmWorkloadInst := &tpapi_v0.HelmWorkloadInstance{
		Instance: tpapi_v0.Instance{
			Name: wireguardInstance.Name,
		},
		HelmWorkloadDefinitionID:    helmWorkloadDef.ID,
		ValuesDocument:              helmWorkloadDef.ValuesDocument,
		KubernetesRuntimeInstanceID: kubernetesRuntimeInstanceId,
	}

	// Create the HelmWorkloadInstance using the client
	createdInst, err := helmclient_v0.CreateHelmWorkloadInstance(r.APIClient, r.APIServer, helmWorkloadInst)
	if err != nil {
		return 0, fmt.Errorf("failed to create HelmWorkloadInstance: %w", err)
	}

	// Optionally, you can log or use the created instance
	log.Info("created HelmWorkloadInstance", "name", createdInst.Name)

	return 0, nil
}

// v0WireguardInstanceUpdated performs reconciliation when a v0 WireguardInstance
// has been updated.
func v0WireguardInstanceUpdated(
	r *controller.Reconciler,
	wireguardInstance *v0.WireguardInstance,
	log *logr.Logger,
) (int64, error) {
	// Get the associated HelmWorkloadInstance by name
	helmWorkloadInst, err := helmclient_v0.GetHelmWorkloadInstanceByName(r.APIClient, r.APIServer, *wireguardInstance.Name)
	if err != nil {
		return 0, fmt.Errorf("failed to get HelmWorkloadInstance: %w", err)
	}

	// Marshal the Helm values to YAML
	valuesYAML, err := yaml.Marshal(getHelmValues())
	if err != nil {
		return 0, fmt.Errorf("failed to marshal Helm values: %w", err)
	}
	valuesStr := string(valuesYAML)

	// Update the HelmWorkloadInstance values
	helmWorkloadInst.ValuesDocument = &valuesStr

	// Update the HelmWorkloadInstance using the client
	updatedInst, err := helmclient_v0.UpdateHelmWorkloadInstance(r.APIClient, r.APIServer, helmWorkloadInst)
	if err != nil {
		return 0, fmt.Errorf("failed to update HelmWorkloadInstance: %w", err)
	}

	// Optionally, you can log or use the updated instance
	log.Info("updated HelmWorkloadInstance", "name", updatedInst.Name)

	return 0, nil
}

// v0WireguardInstanceDeleted performs reconciliation when a v0 WireguardInstance
// has been deleted.
func v0WireguardInstanceDeleted(
	r *controller.Reconciler,
	wireguardInstance *v0.WireguardInstance,
	log *logr.Logger,
) (int64, error) {
	// Get the associated HelmWorkloadInstance by name
	helmWorkloadInst, err := helmclient_v0.GetHelmWorkloadInstanceByName(r.APIClient, r.APIServer, *wireguardInstance.Name)
	if err != nil {
		return 0, fmt.Errorf("failed to get HelmWorkloadInstance: %w", err)
	}

	// Delete the HelmWorkloadInstance using the client
	_, err = helmclient_v0.DeleteHelmWorkloadInstance(r.APIClient, r.APIServer, *helmWorkloadInst.ID)
	if err != nil {
		return 0, fmt.Errorf("failed to delete HelmWorkloadInstance: %w", err)
	}

	// Optionally, you can log the deletion
	log.Info("deleted HelmWorkloadInstance", "name", helmWorkloadInst.Name)

	return 0, nil
}
